@echo off
REM Bulletproof Database Installation Script for MinisForum PC
REM Generated by Silver Fox Assistant - %DATE% %TIME%

echo ========================================
echo MINISFORUM DATABASE INSTALLATION
echo ========================================
echo.

REM Check if PostgreSQL is running
echo Checking PostgreSQL service...
sc query postgresql-x64-16 >nul 2>&1
if %ERRORLEVEL% NEQ 0 (
    echo ERROR: PostgreSQL service not found. Please install PostgreSQL 16 first.
    pause
    exit /b 1
)

echo PostgreSQL service found. Proceeding with installation...
echo.

REM Set environment variables
set PGUSER=postgres
set PGDATABASE=postgres
set PGHOST=localhost
set PGPORT=5432

REM Prompt for password
echo Please enter the PostgreSQL password for user 'postgres':
set /p PGPASSWORD=Password: 
set PGPASSWORD=%PGPASSWORD%

echo.
echo Starting database installation...
echo.

REM Create database
echo Step 1: Creating database...
psql -c "DROP DATABASE IF EXISTS minisforum_dealership_db;"
psql -c "CREATE DATABASE minisforum_dealership_db;"
if %ERRORLEVEL% NEQ 0 (
    echo ERROR: Failed to create database
    pause
    exit /b 1
)
echo Database created successfully.

REM Set database for subsequent commands
set PGDATABASE=minisforum_dealership_db

REM Run SQL files
echo Step 2: Creating tables...
psql -f sql\02_create_tables.sql
if %ERRORLEVEL% NEQ 0 (
    echo ERROR: Failed to create tables
    pause
    exit /b 1
)
echo Tables created successfully.

echo Step 3: Loading dealership configurations...
psql -f sql\03_initial_dealership_configs.sql
if %ERRORLEVEL% NEQ 0 (
    echo ERROR: Failed to load dealership configs
    pause
    exit /b 1
)
echo Dealership configurations loaded successfully.

echo Step 4: Applying performance settings...
if exist sql\04_performance_settings.sql (
    psql -f sql\04_performance_settings.sql
    echo Performance settings applied.
) else (
    echo Performance settings file not found, skipping.
)

echo Step 5: Creating order processing integration tables...
psql -f sql\06_order_processing_tables.sql
if %ERRORLEVEL% NEQ 0 (
    echo ERROR: Failed to create order processing tables
    pause
    exit /b 1
)
echo Order processing integration tables created successfully.

REM Create directories for QR codes and exports
echo Step 6: Creating directory structure...
if not exist "C:\qr_codes" mkdir "C:\qr_codes"
if not exist "C:\exports" mkdir "C:\exports"
if not exist "C:\data_imports" mkdir "C:\data_imports"

REM Create subdirectories for each dealership
for /f "tokens=*" %%i in ('psql -t -c "SELECT name FROM dealership_configs WHERE is_active = true;"') do (
    set dealer_name=%%i
    set dealer_name=!dealer_name: =!
    if not "!dealer_name!"=="" (
        if not exist "C:\qr_codes\!dealer_name!" mkdir "C:\qr_codes\!dealer_name!"
    )
)

echo Directory structure created.

REM Install Python dependencies
echo Step 7: Installing Python dependencies...
if exist scripts\requirements.txt (
    pip install -r scripts\requirements.txt
    echo Python dependencies installed.
) else (
    echo Requirements file not found. Please install manually:
    echo pip install psycopg2-binary pandas
)

echo.
echo ========================================
echo INSTALLATION COMPLETED SUCCESSFULLY!
echo ========================================
echo.
echo The database is now ready for use.
echo.
echo Quick start:
echo 1. Place complete_data.csv files in C:\data_imports\
echo 2. Run: python scripts\csv_importer_complete.py C:\data_imports\complete_data.csv
echo 3. Create order processing job: python scripts\order_processing_integration.py create-job --dealership "BMW of West St. Louis"
echo 4. Export data: python scripts\data_exporter.py --all --output C:\exports\today.csv
echo 5. Test integration: python scripts\test_order_processing_integration.py
echo.
echo For troubleshooting, check the documentation in the docs folder.
echo.
pause
