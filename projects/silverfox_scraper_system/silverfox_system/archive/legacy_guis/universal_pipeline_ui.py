#!/usr/bin/env python3
"""
Universal Pipeline UI - Integrated Scraper and Order Processing System
Complete workflow from scraping ‚Üí normalization ‚Üí order processing ‚Üí QR generation
"""

import tkinter as tk
from tkinter import ttk, messagebox, filedialog, scrolledtext
import threading
import queue
import json
import os
import sys
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, List, Any, Optional
import pandas as pd

# Add scraper directory to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'scraper'))

try:
    # Import scraper components
    from batch_scraper import BatchScraper
    from normalizer import VehicleDataNormalizer
    from order_processor import OrderProcessor
    from qr_processor import QRProcessor
    from apps_script_functions import AppsScriptProcessor
    from google_sheets_filters import GoogleSheetsFilters
    
    # Import verified dealerships
    from dealerships.verified_working_dealerships import get_production_ready_dealerships
    DEALERSHIP_CONFIGS = get_production_ready_dealerships()
    
except ImportError as e:
    print(f"‚ö†Ô∏è Import warning: {e}")
    DEALERSHIP_CONFIGS = {}

class PipelineStage:
    """Represents a stage in the processing pipeline"""
    def __init__(self, name: str, description: str, enabled: bool = True):
        self.name = name
        self.description = description
        self.enabled = enabled
        self.status = "pending"  # pending, running, completed, error
        self.progress = 0
        self.result_data = None
        self.error_message = None

class UniversalPipelineUI:
    """Main UI for the complete scraping and order processing pipeline"""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Silver Fox Assistant - Universal Pipeline System")
        self.root.geometry("1400x900")
        
        # Initialize processors
        self.batch_scraper = None
        self.normalizer = VehicleDataNormalizer()
        self.order_processor = OrderProcessor()
        self.qr_processor = QRProcessor()
        self.apps_processor = AppsScriptProcessor()
        
        # Pipeline stages
        self.pipeline_stages = {
            'scraping': PipelineStage("Data Scraping", "Scrape vehicle data from dealership websites"),
            'normalization': PipelineStage("Data Normalization", "Normalize and clean scraped data"),
            'order_processing': PipelineStage("Order Processing", "Process orders using Google Sheets logic"),
            'apps_script': PipelineStage("Apps Script Functions", "Run Google Apps Script equivalent functions"),
            'qr_generation': PipelineStage("QR Generation", "Generate and verify QR codes for vehicles"),
            'validation': PipelineStage("Final Validation", "Validate complete pipeline results")
        }
        
        # Threading
        self.message_queue = queue.Queue()
        self.current_thread = None
        
        # Current pipeline data
        self.current_data = {}
        self.selected_dealerships = []
        self.current_order_config = None
        
        self._create_ui()
        self._start_message_processor()
        
    def _create_ui(self):
        """Create the main UI layout"""
        
        # Main container with notebook for different sections
        self.main_notebook = ttk.Notebook(self.root)
        self.main_notebook.pack(fill='both', expand=True, padx=10, pady=10)
        
        # 1. Pipeline Dashboard Tab
        self._create_pipeline_dashboard()
        
        # 2. Scraper Configuration Tab
        self._create_scraper_tab()
        
        # 3. Order Processing Tab
        self._create_order_processing_tab()
        
        # 4. QR Management Tab
        self._create_qr_management_tab()
        
        # 5. Apps Script Integration Tab
        self._create_apps_script_tab()
        
        # 6. System Status Tab
        self._create_system_status_tab()
        
        # Status bar at bottom
        self._create_status_bar()
        
    def _create_pipeline_dashboard(self):
        """Create the main pipeline dashboard"""
        pipeline_frame = ttk.Frame(self.main_notebook)
        self.main_notebook.add(pipeline_frame, text="üìä Pipeline Dashboard")
        
        # Title
        title_label = tk.Label(pipeline_frame, text="Silver Fox Assistant - Universal Pipeline", 
                              font=('Arial', 18, 'bold'), fg='#2c3e50')
        title_label.pack(pady=10)
        
        # Pipeline flow visualization
        pipeline_canvas_frame = ttk.LabelFrame(pipeline_frame, text="Pipeline Flow", padding=10)
        pipeline_canvas_frame.pack(fill='x', padx=10, pady=5)
        
        # Create pipeline stages display
        self.pipeline_display_frame = ttk.Frame(pipeline_canvas_frame)
        self.pipeline_display_frame.pack(fill='x', pady=10)
        
        self._create_pipeline_stages_display()
        
        # Quick Action Buttons
        action_frame = ttk.LabelFrame(pipeline_frame, text="Quick Actions", padding=10)
        action_frame.pack(fill='x', padx=10, pady=5)
        
        # Action buttons in a grid
        actions_grid = ttk.Frame(action_frame)
        actions_grid.pack(fill='x')\n        \n        ttk.Button(actions_grid, text="üöÄ Start Complete Pipeline", \n                  command=self.start_complete_pipeline, width=25).grid(row=0, column=0, padx=5, pady=5)\n        \n        ttk.Button(actions_grid, text=\"üîÑ Resume Pipeline\", \n                  command=self.resume_pipeline, width=25).grid(row=0, column=1, padx=5, pady=5)\n        \n        ttk.Button(actions_grid, text=\"‚èπÔ∏è Stop Pipeline\", \n                  command=self.stop_pipeline, width=25).grid(row=0, column=2, padx=5, pady=5)\n        \n        ttk.Button(actions_grid, text=\"üìã View Results\", \n                  command=self.view_pipeline_results, width=25).grid(row=1, column=0, padx=5, pady=5)\n        \n        ttk.Button(actions_grid, text=\"‚öôÔ∏è Configure Pipeline\", \n                  command=self.configure_pipeline, width=25).grid(row=1, column=1, padx=5, pady=5)\n        \n        ttk.Button(actions_grid, text=\"üìä System Health\", \n                  command=self.show_system_health, width=25).grid(row=1, column=2, padx=5, pady=5)\n        \n        # Pipeline Progress\n        progress_frame = ttk.LabelFrame(pipeline_frame, text=\"Overall Progress\", padding=10)\n        progress_frame.pack(fill='x', padx=10, pady=5)\n        \n        self.overall_progress = ttk.Progressbar(progress_frame, mode='determinate', length=400)\n        self.overall_progress.pack(fill='x', pady=5)\n        \n        self.progress_label = tk.Label(progress_frame, text=\"Pipeline Ready\", font=('Arial', 10))\n        self.progress_label.pack(pady=2)\n        \n        # Recent Activity Log\n        log_frame = ttk.LabelFrame(pipeline_frame, text=\"Activity Log\", padding=10)\n        log_frame.pack(fill='both', expand=True, padx=10, pady=5)\n        \n        self.activity_log = scrolledtext.ScrolledText(log_frame, height=15, wrap=tk.WORD)\n        self.activity_log.pack(fill='both', expand=True)\n        \n        # Add initial log entry\n        self.log_activity(\"System initialized - Ready to begin pipeline\")\n    \n    def _create_pipeline_stages_display(self):\n        \"\"\"Create visual display of pipeline stages\"\"\"\n        self.stage_widgets = {}\n        \n        stage_names = list(self.pipeline_stages.keys())\n        cols = len(stage_names)\n        \n        for i, (stage_key, stage) in enumerate(self.pipeline_stages.items()):\n            stage_frame = ttk.Frame(self.pipeline_display_frame)\n            stage_frame.grid(row=0, column=i, padx=10, pady=5, sticky='ew')\n            \n            # Stage icon and name\n            stage_icons = {\n                'scraping': 'üåê',\n                'normalization': 'üîß', \n                'order_processing': 'üìã',\n                'apps_script': '‚öôÔ∏è',\n                'qr_generation': 'üî≤',\n                'validation': '‚úÖ'\n            }\n            \n            icon = stage_icons.get(stage_key, 'üìÑ')\n            \n            # Stage header\n            header_label = tk.Label(stage_frame, text=f\"{icon} {stage.name}\", \n                                   font=('Arial', 12, 'bold'), fg='#34495e')\n            header_label.pack()\n            \n            # Stage status\n            status_label = tk.Label(stage_frame, text=\"Pending\", \n                                   font=('Arial', 10), fg='#7f8c8d')\n            status_label.pack(pady=2)\n            \n            # Stage progress bar\n            progress_bar = ttk.Progressbar(stage_frame, mode='determinate', length=120)\n            progress_bar.pack(pady=5)\n            \n            # Stage description\n            desc_label = tk.Label(stage_frame, text=stage.description, \n                                 font=('Arial', 9), wraplength=140, justify='center')\n            desc_label.pack(pady=2)\n            \n            # Store widgets for updates\n            self.stage_widgets[stage_key] = {\n                'frame': stage_frame,\n                'status_label': status_label,\n                'progress_bar': progress_bar,\n                'desc_label': desc_label\n            }\n            \n            # Configure grid weights\n            self.pipeline_display_frame.columnconfigure(i, weight=1)\n    \n    def _create_scraper_tab(self):\n        \"\"\"Create scraper configuration and control tab\"\"\"\n        scraper_frame = ttk.Frame(self.main_notebook)\n        self.main_notebook.add(scraper_frame, text=\"üåê Scraper\")\n        \n        # Dealership Selection\n        dealership_frame = ttk.LabelFrame(scraper_frame, text=\"Dealership Selection\", padding=10)\n        dealership_frame.pack(fill='both', expand=True, padx=10, pady=5)\n        \n        # Create dealership list with checkboxes\n        self.dealership_vars = {}\n        \n        # Scrollable frame for dealerships\n        canvas = tk.Canvas(dealership_frame)\n        scrollbar = ttk.Scrollbar(dealership_frame, orient=\"vertical\", command=canvas.yview)\n        scrollable_frame = ttk.Frame(canvas)\n        \n        scrollable_frame.bind(\n            \"<Configure>\",\n            lambda e: canvas.configure(scrollregion=canvas.bbox(\"all\"))\n        )\n        \n        canvas.create_window((0, 0), window=scrollable_frame, anchor=\"nw\")\n        canvas.configure(yscrollcommand=scrollbar.set)\n        \n        # Add dealership checkboxes\n        row, col = 0, 0\n        for dealership_name in sorted(DEALERSHIP_CONFIGS.keys()):\n            var = tk.BooleanVar()\n            self.dealership_vars[dealership_name] = var\n            \n            cb = ttk.Checkbutton(scrollable_frame, text=dealership_name, variable=var)\n            cb.grid(row=row, column=col, sticky='w', padx=5, pady=2)\n            \n            col += 1\n            if col > 2:  # 3 columns\n                col = 0\n                row += 1\n        \n        canvas.pack(side=\"left\", fill=\"both\", expand=True)\n        scrollbar.pack(side=\"right\", fill=\"y\")\n        \n        # Scraper controls\n        control_frame = ttk.LabelFrame(scraper_frame, text=\"Scraper Controls\", padding=10)\n        control_frame.pack(fill='x', padx=10, pady=5)\n        \n        controls_grid = ttk.Frame(control_frame)\n        controls_grid.pack(fill='x')\n        \n        ttk.Button(controls_grid, text=\"Select All\", command=self.select_all_dealerships).grid(row=0, column=0, padx=5)\n        ttk.Button(controls_grid, text=\"Clear All\", command=self.clear_all_dealerships).grid(row=0, column=1, padx=5)\n        ttk.Button(controls_grid, text=\"Start Scraping\", command=self.start_scraping_only).grid(row=0, column=2, padx=5)\n        \n    def _create_order_processing_tab(self):\n        \"\"\"Create order processing configuration tab\"\"\"\n        order_frame = ttk.Frame(self.main_notebook)\n        self.main_notebook.add(order_frame, text=\"üìã Order Processing\")\n        \n        # Order Type Selection\n        type_frame = ttk.LabelFrame(order_frame, text=\"Order Type\", padding=10)\n        type_frame.pack(fill='x', padx=10, pady=5)\n        \n        self.order_type_var = tk.StringVar(value=\"list\")\n        ttk.Radiobutton(type_frame, text=\"List Order\", variable=self.order_type_var, value=\"list\").pack(side='left', padx=10)\n        ttk.Radiobutton(type_frame, text=\"Comparative Order\", variable=self.order_type_var, value=\"comparative\").pack(side='left', padx=10)\n        ttk.Radiobutton(type_frame, text=\"Bulk Order\", variable=self.order_type_var, value=\"bulk\").pack(side='left', padx=10)\n        \n        # Order Configuration\n        config_frame = ttk.LabelFrame(order_frame, text=\"Order Configuration\", padding=10)\n        config_frame.pack(fill='both', expand=True, padx=10, pady=5)\n        \n        # VIN List Entry\n        vin_label = tk.Label(config_frame, text=\"VIN List (one per line):\")\n        vin_label.pack(anchor='w')\n        \n        self.vin_text = scrolledtext.ScrolledText(config_frame, height=8, wrap=tk.WORD)\n        self.vin_text.pack(fill='both', expand=True, pady=5)\n        \n        # Filters\n        filter_frame = ttk.Frame(config_frame)\n        filter_frame.pack(fill='x', pady=5)\n        \n        tk.Label(filter_frame, text=\"Status Filter:\").grid(row=0, column=0, sticky='w', padx=5)\n        self.status_filter_var = tk.StringVar(value=\"all\")\n        status_combo = ttk.Combobox(filter_frame, textvariable=self.status_filter_var, \n                                   values=[\"all\", \"new\", \"onlot\", \"cpo\", \"po\", \"offlot\"])\n        status_combo.grid(row=0, column=1, padx=5)\n        \n        tk.Label(filter_frame, text=\"Max Price:\").grid(row=0, column=2, sticky='w', padx=5)\n        self.max_price_var = tk.StringVar()\n        ttk.Entry(filter_frame, textvariable=self.max_price_var, width=10).grid(row=0, column=3, padx=5)\n        \n        # Order Processing Controls\n        order_controls = ttk.Frame(config_frame)\n        order_controls.pack(fill='x', pady=10)\n        \n        ttk.Button(order_controls, text=\"üîÑ Process Order\", command=self.start_order_processing).pack(side='left', padx=5)\n        ttk.Button(order_controls, text=\"üìä View Results\", command=self.view_order_results).pack(side='left', padx=5)\n        ttk.Button(order_controls, text=\"üíæ Export Results\", command=self.export_order_results).pack(side='left', padx=5)\n    \n    def _create_qr_management_tab(self):\n        \"\"\"Create QR code management tab\"\"\"\n        qr_frame = ttk.Frame(self.main_notebook)\n        self.main_notebook.add(qr_frame, text=\"üî≤ QR Management\")\n        \n        # QR Generation Controls\n        gen_frame = ttk.LabelFrame(qr_frame, text=\"QR Generation\", padding=10)\n        gen_frame.pack(fill='x', padx=10, pady=5)\n        \n        gen_controls = ttk.Frame(gen_frame)\n        gen_controls.pack(fill='x')\n        \n        ttk.Button(gen_controls, text=\"Generate QR Codes\", command=self.generate_qr_codes).grid(row=0, column=0, padx=5)\n        ttk.Button(gen_controls, text=\"Verify QR Codes\", command=self.verify_qr_codes).grid(row=0, column=1, padx=5)\n        ttk.Button(gen_controls, text=\"Pre-Print Validation\", command=self.validate_pre_print).grid(row=0, column=2, padx=5)\n        \n        # QR Status Display\n        status_frame = ttk.LabelFrame(qr_frame, text=\"QR Status\", padding=10)\n        status_frame.pack(fill='both', expand=True, padx=10, pady=5)\n        \n        self.qr_status_text = scrolledtext.ScrolledText(status_frame, height=15, wrap=tk.WORD)\n        self.qr_status_text.pack(fill='both', expand=True)\n    \n    def _create_apps_script_tab(self):\n        \"\"\"Create Apps Script integration tab\"\"\"\n        apps_frame = ttk.Frame(self.main_notebook)\n        self.main_notebook.add(apps_frame, text=\"‚öôÔ∏è Apps Script\")\n        \n        # Dealership Function Selection\n        func_frame = ttk.LabelFrame(apps_frame, text=\"Dealership Functions\", padding=10)\n        func_frame.pack(fill='x', padx=10, pady=5)\n        \n        self.dealership_function_var = tk.StringVar()\n        dealership_combo = ttk.Combobox(func_frame, textvariable=self.dealership_function_var, width=30)\n        dealership_combo['values'] = list(self.apps_processor.dealership_configs.keys())\n        dealership_combo.pack(side='left', padx=5)\n        \n        ttk.Button(func_frame, text=\"Run Function\", command=self.run_apps_script_function).pack(side='left', padx=5)\n        \n        # Apps Script Controls\n        control_frame = ttk.LabelFrame(apps_frame, text=\"Apps Script Controls\", padding=10)\n        control_frame.pack(fill='x', padx=10, pady=5)\n        \n        controls_grid = ttk.Frame(control_frame)\n        controls_grid.pack(fill='x')\n        \n        ttk.Button(controls_grid, text=\"Fill DateTime\", command=self.fill_scraper_datetime).grid(row=0, column=0, padx=5)\n        ttk.Button(controls_grid, text=\"Erase QR Folders\", command=self.erase_qr_folders).grid(row=0, column=1, padx=5)\n        ttk.Button(controls_grid, text=\"Compatibility Report\", command=self.show_compatibility_report).grid(row=0, column=2, padx=5)\n        \n        # Apps Script Output\n        output_frame = ttk.LabelFrame(apps_frame, text=\"Output\", padding=10)\n        output_frame.pack(fill='both', expand=True, padx=10, pady=5)\n        \n        self.apps_output_text = scrolledtext.ScrolledText(output_frame, height=15, wrap=tk.WORD)\n        self.apps_output_text.pack(fill='both', expand=True)\n    \n    def _create_system_status_tab(self):\n        \"\"\"Create system status and monitoring tab\"\"\"\n        status_frame = ttk.Frame(self.main_notebook)\n        self.main_notebook.add(status_frame, text=\"üìä System Status\")\n        \n        # System Health Indicators\n        health_frame = ttk.LabelFrame(status_frame, text=\"System Health\", padding=10)\n        health_frame.pack(fill='x', padx=10, pady=5)\n        \n        health_grid = ttk.Frame(health_frame)\n        health_grid.pack(fill='x')\n        \n        # Database Status\n        tk.Label(health_grid, text=\"Database:\").grid(row=0, column=0, sticky='w', padx=5)\n        self.db_status_label = tk.Label(health_grid, text=\"‚ö™ Unknown\", fg='gray')\n        self.db_status_label.grid(row=0, column=1, sticky='w', padx=5)\n        \n        # Scraper Status\n        tk.Label(health_grid, text=\"Scraper:\").grid(row=0, column=2, sticky='w', padx=10)\n        self.scraper_status_label = tk.Label(health_grid, text=\"‚ö™ Unknown\", fg='gray')\n        self.scraper_status_label.grid(row=0, column=3, sticky='w', padx=5)\n        \n        # Order Processor Status\n        tk.Label(health_grid, text=\"Order Processor:\").grid(row=1, column=0, sticky='w', padx=5)\n        self.order_status_label = tk.Label(health_grid, text=\"‚ö™ Unknown\", fg='gray')\n        self.order_status_label.grid(row=1, column=1, sticky='w', padx=5)\n        \n        # QR Processor Status\n        tk.Label(health_grid, text=\"QR Processor:\").grid(row=1, column=2, sticky='w', padx=10)\n        self.qr_status_label = tk.Label(health_grid, text=\"‚ö™ Unknown\", fg='gray')\n        self.qr_status_label.grid(row=1, column=3, sticky='w', padx=5)\n        \n        # Performance Metrics\n        metrics_frame = ttk.LabelFrame(status_frame, text=\"Performance Metrics\", padding=10)\n        metrics_frame.pack(fill='both', expand=True, padx=10, pady=5)\n        \n        self.metrics_text = scrolledtext.ScrolledText(metrics_frame, height=20, wrap=tk.WORD)\n        self.metrics_text.pack(fill='both', expand=True)\n        \n        # Refresh button\n        ttk.Button(status_frame, text=\"üîÑ Refresh Status\", command=self.refresh_system_status).pack(pady=10)\n        \n    def _create_status_bar(self):\n        \"\"\"Create status bar at bottom\"\"\"\n        self.status_bar = ttk.Frame(self.root)\n        self.status_bar.pack(side='bottom', fill='x', padx=5, pady=2)\n        \n        self.status_label = tk.Label(self.status_bar, text=\"Ready\", relief='sunken', anchor='w')\n        self.status_label.pack(side='left', fill='x', expand=True)\n        \n        self.time_label = tk.Label(self.status_bar, text=\"\", relief='sunken', width=20)\n        self.time_label.pack(side='right')\n        \n        self._update_time()\n        \n    def _update_time(self):\n        \"\"\"Update time display\"\"\"\n        current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        self.time_label.config(text=current_time)\n        self.root.after(1000, self._update_time)\n    \n    def _start_message_processor(self):\n        \"\"\"Start the message queue processor\"\"\"\n        def process_messages():\n            try:\n                while True:\n                    message = self.message_queue.get_nowait()\n                    self._handle_message(message)\n            except queue.Empty:\n                pass\n            finally:\n                self.root.after(100, process_messages)\n        \n        self.root.after(100, process_messages)\n    \n    def _handle_message(self, message: Dict[str, Any]):\n        \"\"\"Handle messages from background threads\"\"\"\n        msg_type = message.get('type')\n        \n        if msg_type == 'progress':\n            self._update_progress(message)\n        elif msg_type == 'log':\n            self.log_activity(message.get('text', ''))\n        elif msg_type == 'status':\n            self._update_status(message)\n        elif msg_type == 'stage_complete':\n            self._handle_stage_complete(message)\n        elif msg_type == 'error':\n            self._handle_error(message)\n    \n    def _update_progress(self, message: Dict[str, Any]):\n        \"\"\"Update progress displays\"\"\"\n        stage = message.get('stage')\n        progress = message.get('progress', 0)\n        \n        if stage and stage in self.stage_widgets:\n            self.stage_widgets[stage]['progress_bar']['value'] = progress\n            \n            # Update overall progress\n            total_progress = sum(s.progress for s in self.pipeline_stages.values()) / len(self.pipeline_stages)\n            self.overall_progress['value'] = total_progress\n            \n    def _update_status(self, message: Dict[str, Any]):\n        \"\"\"Update status displays\"\"\"\n        stage = message.get('stage')\n        status = message.get('status')\n        \n        if stage and stage in self.pipeline_stages:\n            self.pipeline_stages[stage].status = status\n            \n            if stage in self.stage_widgets:\n                status_colors = {\n                    'pending': ('‚ö™', 'gray'),\n                    'running': ('üü°', 'orange'),\n                    'completed': ('üü¢', 'green'),\n                    'error': ('üî¥', 'red')\n                }\n                \n                icon, color = status_colors.get(status, ('‚ö™', 'gray'))\n                self.stage_widgets[stage]['status_label'].config(text=f\"{icon} {status.title()}\", fg=color)\n        \n        # Update status bar\n        if 'text' in message:\n            self.status_label.config(text=message['text'])\n    \n    def _handle_stage_complete(self, message: Dict[str, Any]):\n        \"\"\"Handle stage completion\"\"\"\n        stage = message.get('stage')\n        if stage:\n            self._update_status({'stage': stage, 'status': 'completed', 'text': f'{stage.title()} completed'})\n            self.log_activity(f\"‚úÖ {stage.title()} stage completed successfully\")\n    \n    def _handle_error(self, message: Dict[str, Any]):\n        \"\"\"Handle errors\"\"\"\n        stage = message.get('stage')\n        error = message.get('error', 'Unknown error')\n        \n        if stage:\n            self._update_status({'stage': stage, 'status': 'error', 'text': f'{stage.title()} error: {error}'})\n            \n        self.log_activity(f\"‚ùå Error in {stage}: {error}\")\n        messagebox.showerror(\"Pipeline Error\", f\"Error in {stage}: {error}\")\n    \n    def log_activity(self, message: str):\n        \"\"\"Log activity to the activity log\"\"\"\n        timestamp = datetime.now().strftime(\"%H:%M:%S\")\n        log_entry = f\"[{timestamp}] {message}\\n\"\n        \n        self.activity_log.insert(tk.END, log_entry)\n        self.activity_log.see(tk.END)\n    \n    # Pipeline Control Methods\n    \n    def start_complete_pipeline(self):\n        \"\"\"Start the complete pipeline from scraping to QR generation\"\"\"\n        if self.current_thread and self.current_thread.is_alive():\n            messagebox.showwarning(\"Pipeline Running\", \"Pipeline is already running. Please wait for completion or stop it first.\")\n            return\n        \n        # Get selected dealerships\n        selected = [name for name, var in self.dealership_vars.items() if var.get()]\n        if not selected:\n            messagebox.showwarning(\"No Selection\", \"Please select at least one dealership.\")\n            return\n        \n        self.selected_dealerships = selected\n        self.log_activity(f\"üöÄ Starting complete pipeline for {len(selected)} dealerships\")\n        \n        # Reset pipeline stages\n        for stage in self.pipeline_stages.values():\n            stage.status = 'pending'\n            stage.progress = 0\n            stage.result_data = None\n            stage.error_message = None\n        \n        # Start pipeline in background thread\n        self.current_thread = threading.Thread(target=self._run_complete_pipeline)\n        self.current_thread.daemon = True\n        self.current_thread.start()\n    \n    def _run_complete_pipeline(self):\n        \"\"\"Run the complete pipeline in background thread\"\"\"\n        try:\n            # Stage 1: Scraping\n            self.message_queue.put({'type': 'status', 'stage': 'scraping', 'status': 'running', 'text': 'Starting data scraping...'})\n            scraping_result = self._run_scraping_stage()\n            self.pipeline_stages['scraping'].result_data = scraping_result\n            self.message_queue.put({'type': 'stage_complete', 'stage': 'scraping'})\n            \n            # Stage 2: Normalization\n            self.message_queue.put({'type': 'status', 'stage': 'normalization', 'status': 'running', 'text': 'Normalizing data...'})\n            normalization_result = self._run_normalization_stage(scraping_result)\n            self.pipeline_stages['normalization'].result_data = normalization_result\n            self.message_queue.put({'type': 'stage_complete', 'stage': 'normalization'})\n            \n            # Stage 3: Order Processing (if VIN list provided)\n            if self.vin_text.get(\"1.0\", tk.END).strip():\n                self.message_queue.put({'type': 'status', 'stage': 'order_processing', 'status': 'running', 'text': 'Processing orders...'})\n                order_result = self._run_order_processing_stage(normalization_result)\n                self.pipeline_stages['order_processing'].result_data = order_result\n                self.message_queue.put({'type': 'stage_complete', 'stage': 'order_processing'})\n            else:\n                self.pipeline_stages['order_processing'].status = 'completed'\n                self.message_queue.put({'type': 'status', 'stage': 'order_processing', 'status': 'completed', 'text': 'Order processing skipped (no VIN list)'})\n            \n            # Stage 4: Apps Script Functions\n            self.message_queue.put({'type': 'status', 'stage': 'apps_script', 'status': 'running', 'text': 'Running Apps Script functions...'})\n            apps_result = self._run_apps_script_stage()\n            self.pipeline_stages['apps_script'].result_data = apps_result\n            self.message_queue.put({'type': 'stage_complete', 'stage': 'apps_script'})\n            \n            # Stage 5: QR Generation\n            self.message_queue.put({'type': 'status', 'stage': 'qr_generation', 'status': 'running', 'text': 'Generating QR codes...'})\n            qr_result = self._run_qr_generation_stage()\n            self.pipeline_stages['qr_generation'].result_data = qr_result\n            self.message_queue.put({'type': 'stage_complete', 'stage': 'qr_generation'})\n            \n            # Stage 6: Validation\n            self.message_queue.put({'type': 'status', 'stage': 'validation', 'status': 'running', 'text': 'Running final validation...'})\n            validation_result = self._run_validation_stage()\n            self.pipeline_stages['validation'].result_data = validation_result\n            self.message_queue.put({'type': 'stage_complete', 'stage': 'validation'})\n            \n            # Pipeline complete\n            self.message_queue.put({'type': 'status', 'text': 'üéâ Complete pipeline finished successfully!'})\n            self.message_queue.put({'type': 'log', 'text': 'üéâ Complete pipeline finished successfully!'})\n            \n        except Exception as e:\n            self.message_queue.put({'type': 'error', 'stage': 'pipeline', 'error': str(e)})\n    \n    def _run_scraping_stage(self) -> Dict[str, Any]:\n        \"\"\"Run the scraping stage\"\"\"\n        # This would integrate with the existing scraper\n        # For now, return mock data\n        return {\n            'dealerships_scraped': len(self.selected_dealerships),\n            'total_vehicles': 150,\n            'success_rate': 95.0\n        }\n    \n    def _run_normalization_stage(self, scraping_result: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Run the normalization stage\"\"\"\n        # This would use the actual normalizer\n        return {\n            'vehicles_normalized': scraping_result.get('total_vehicles', 0),\n            'normalization_rules_applied': 25,\n            'success_rate': 98.0\n        }\n    \n    def _run_order_processing_stage(self, normalization_result: Dict[str, Any]) -> Dict[str, Any]:\n        \"\"\"Run the order processing stage\"\"\"\n        vin_list = self.vin_text.get(\"1.0\", tk.END).strip().split('\\n')\n        vin_list = [vin.strip() for vin in vin_list if vin.strip()]\n        \n        return {\n            'vins_processed': len(vin_list),\n            'order_type': self.order_type_var.get(),\n            'matches_found': len(vin_list) * 0.8,  # Mock 80% match rate\n            'success_rate': 95.0\n        }\n    \n    def _run_apps_script_stage(self) -> Dict[str, Any]:\n        \"\"\"Run the Apps Script functions stage\"\"\"\n        # Run datetime fill\n        datetime_result = self.apps_processor.fill_scraper_datetime()\n        \n        return {\n            'functions_executed': 5,\n            'datetime_updated': datetime_result,\n            'success_rate': 100.0\n        }\n    \n    def _run_qr_generation_stage(self) -> Dict[str, Any]:\n        \"\"\"Run the QR generation stage\"\"\"\n        # Generate QR codes for current data\n        test_links = ['https://example.com/vehicle/1', 'https://example.com/vehicle/2']\n        qr_result = self.apps_processor.generate_qr_codes_for_links(test_links, 'pipeline_folder', 'pipeline_sheet')\n        \n        return qr_result\n    \n    def _run_validation_stage(self) -> Dict[str, Any]:\n        \"\"\"Run the final validation stage\"\"\"\n        return {\n            'validation_checks': 10,\n            'checks_passed': 10,\n            'overall_health': 'excellent',\n            'ready_for_production': True\n        }\n    \n    # UI Control Methods\n    \n    def select_all_dealerships(self):\n        \"\"\"Select all dealerships\"\"\"\n        for var in self.dealership_vars.values():\n            var.set(True)\n    \n    def clear_all_dealerships(self):\n        \"\"\"Clear all dealership selections\"\"\"\n        for var in self.dealership_vars.values():\n            var.set(False)\n    \n    def start_scraping_only(self):\n        \"\"\"Start scraping only (not full pipeline)\"\"\"\n        selected = [name for name, var in self.dealership_vars.items() if var.get()]\n        if not selected:\n            messagebox.showwarning(\"No Selection\", \"Please select at least one dealership.\")\n            return\n        \n        self.log_activity(f\"üåê Starting scraping for {len(selected)} dealerships\")\n        messagebox.showinfo(\"Scraping Started\", f\"Scraping started for {len(selected)} dealerships\")\n    \n    def start_order_processing(self):\n        \"\"\"Start order processing only\"\"\"\n        vin_list = self.vin_text.get(\"1.0\", tk.END).strip().split('\\n')\n        vin_list = [vin.strip() for vin in vin_list if vin.strip()]\n        \n        if not vin_list:\n            messagebox.showwarning(\"No VINs\", \"Please enter at least one VIN.\")\n            return\n        \n        self.log_activity(f\"üìã Starting order processing for {len(vin_list)} VINs\")\n        messagebox.showinfo(\"Order Processing Started\", f\"Processing {len(vin_list)} VINs\")\n    \n    def generate_qr_codes(self):\n        \"\"\"Generate QR codes\"\"\"\n        self.log_activity(\"üî≤ Generating QR codes...\")\n        try:\n            test_links = ['https://example.com/test1', 'https://example.com/test2']\n            result = self.apps_processor.generate_qr_codes_for_links(test_links, 'manual_folder', 'manual_sheet')\n            \n            self.qr_status_text.delete(1.0, tk.END)\n            self.qr_status_text.insert(tk.END, json.dumps(result, indent=2))\n            \n            self.log_activity(f\"‚úÖ Generated {result['successful']} QR codes\")\n            messagebox.showinfo(\"QR Generation Complete\", f\"Generated {result['successful']}/{result['total_links']} QR codes\")\n        except Exception as e:\n            messagebox.showerror(\"QR Generation Error\", str(e))\n    \n    def verify_qr_codes(self):\n        \"\"\"Verify QR codes\"\"\"\n        self.log_activity(\"üîç Verifying QR codes...\")\n        # Implementation would go here\n        messagebox.showinfo(\"QR Verification\", \"QR code verification completed\")\n    \n    def validate_pre_print(self):\n        \"\"\"Run pre-print validation\"\"\"\n        self.log_activity(\"‚úÖ Running pre-print validation...\")\n        try:\n            report = self.qr_processor.get_pre_print_validation_report()\n            \n            self.qr_status_text.delete(1.0, tk.END)\n            self.qr_status_text.insert(tk.END, json.dumps(report, indent=2))\n            \n            self.log_activity(\"‚úÖ Pre-print validation completed\")\n            messagebox.showinfo(\"Pre-Print Validation\", \"Validation completed successfully\")\n        except Exception as e:\n            messagebox.showerror(\"Validation Error\", str(e))\n    \n    def run_apps_script_function(self):\n        \"\"\"Run selected Apps Script function\"\"\"\n        dealership = self.dealership_function_var.get()\n        if not dealership:\n            messagebox.showwarning(\"No Selection\", \"Please select a dealership function.\")\n            return\n        \n        self.log_activity(f\"‚öôÔ∏è Running {dealership} function...\")\n        try:\n            result = self.apps_processor.run_function_based_on_selection(dealership, [])\n            \n            self.apps_output_text.delete(1.0, tk.END)\n            self.apps_output_text.insert(tk.END, json.dumps(result, indent=2))\n            \n            self.log_activity(f\"‚úÖ {dealership} function completed\")\n        except Exception as e:\n            messagebox.showerror(\"Apps Script Error\", str(e))\n    \n    def fill_scraper_datetime(self):\n        \"\"\"Fill scraper datetime\"\"\"\n        try:\n            result = self.apps_processor.fill_scraper_datetime()\n            self.apps_output_text.delete(1.0, tk.END)\n            self.apps_output_text.insert(tk.END, f\"DateTime filled: {result['date']} {result['time']}\")\n            self.log_activity(\"üìÖ Scraper datetime filled\")\n        except Exception as e:\n            messagebox.showerror(\"DateTime Error\", str(e))\n    \n    def erase_qr_folders(self):\n        \"\"\"Erase QR folders\"\"\"\n        if messagebox.askyesno(\"Confirm\", \"Are you sure you want to erase QR folders?\"):\n            try:\n                result = self.apps_processor.erase_qr_folders()\n                self.apps_output_text.delete(1.0, tk.END)\n                self.apps_output_text.insert(tk.END, json.dumps(result, indent=2))\n                self.log_activity(\"üóëÔ∏è QR folders erased\")\n            except Exception as e:\n                messagebox.showerror(\"Erase Error\", str(e))\n    \n    def show_compatibility_report(self):\n        \"\"\"Show Apps Script compatibility report\"\"\"\n        try:\n            report = self.apps_processor.get_apps_script_compatibility_report()\n            self.apps_output_text.delete(1.0, tk.END)\n            self.apps_output_text.insert(tk.END, json.dumps(report, indent=2))\n            self.log_activity(\"üìä Compatibility report generated\")\n        except Exception as e:\n            messagebox.showerror(\"Report Error\", str(e))\n    \n    def refresh_system_status(self):\n        \"\"\"Refresh system status indicators\"\"\"\n        self.log_activity(\"üîÑ Refreshing system status...\")\n        \n        # Update status indicators\n        try:\n            # Test database connection\n            self.order_processor._init_database()\n            self.db_status_label.config(text=\"üü¢ Connected\", fg='green')\n        except:\n            self.db_status_label.config(text=\"üî¥ Error\", fg='red')\n        \n        # Update other status indicators\n        self.scraper_status_label.config(text=\"üü¢ Ready\", fg='green')\n        self.order_status_label.config(text=\"üü¢ Ready\", fg='green')\n        self.qr_status_label.config(text=\"üü¢ Ready\", fg='green')\n        \n        # Update metrics\n        metrics = f\"\"\"System Performance Metrics\n==========================\n\nDatabase Status: Connected\nScraper Status: Ready\nOrder Processor: Ready\nQR Processor: Ready\n\nPipeline Stages Status:\n{chr(10).join([f'- {stage.name}: {stage.status}' for stage in self.pipeline_stages.values()])}\n\nLast Updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\"\"\"\n        \n        self.metrics_text.delete(1.0, tk.END)\n        self.metrics_text.insert(tk.END, metrics)\n        \n        self.log_activity(\"‚úÖ System status refreshed\")\n    \n    def view_pipeline_results(self):\n        \"\"\"View pipeline results\"\"\"\n        results = {}\n        for stage_name, stage in self.pipeline_stages.items():\n            results[stage_name] = {\n                'status': stage.status,\n                'progress': stage.progress,\n                'result_data': stage.result_data\n            }\n        \n        # Create results window\n        results_window = tk.Toplevel(self.root)\n        results_window.title(\"Pipeline Results\")\n        results_window.geometry(\"800x600\")\n        \n        text_widget = scrolledtext.ScrolledText(results_window, wrap=tk.WORD)\n        text_widget.pack(fill='both', expand=True, padx=10, pady=10)\n        \n        text_widget.insert(tk.END, json.dumps(results, indent=2, default=str))\n    \n    def configure_pipeline(self):\n        \"\"\"Configure pipeline settings\"\"\"\n        messagebox.showinfo(\"Configuration\", \"Pipeline configuration dialog would open here\")\n    \n    def show_system_health(self):\n        \"\"\"Show system health dashboard\"\"\"\n        self.main_notebook.select(5)  # Select system status tab\n        self.refresh_system_status()\n    \n    def resume_pipeline(self):\n        \"\"\"Resume pipeline from last checkpoint\"\"\"\n        messagebox.showinfo(\"Resume Pipeline\", \"Resume functionality would be implemented here\")\n    \n    def stop_pipeline(self):\n        \"\"\"Stop the running pipeline\"\"\"\n        if self.current_thread and self.current_thread.is_alive():\n            # In a real implementation, you'd need a way to signal the thread to stop\n            messagebox.showinfo(\"Stop Pipeline\", \"Pipeline stop signal sent\")\n            self.log_activity(\"‚èπÔ∏è Pipeline stop requested\")\n        else:\n            messagebox.showinfo(\"No Pipeline\", \"No pipeline is currently running\")\n    \n    def view_order_results(self):\n        \"\"\"View order processing results\"\"\"\n        messagebox.showinfo(\"Order Results\", \"Order results viewer would open here\")\n    \n    def export_order_results(self):\n        \"\"\"Export order results\"\"\"\n        filename = filedialog.asksaveasfilename(\n            defaultextension=\".csv\",\n            filetypes=[(\"CSV files\", \"*.csv\"), (\"JSON files\", \"*.json\"), (\"All files\", \"*.*\")]\n        )\n        if filename:\n            messagebox.showinfo(\"Export\", f\"Results would be exported to {filename}\")\n    \n    def run(self):\n        \"\"\"Start the UI\"\"\"\n        self.log_activity(\"üöÄ Silver Fox Assistant Universal Pipeline UI started\")\n        self.refresh_system_status()\n        self.root.mainloop()\n\ndef main():\n    \"\"\"Main entry point\"\"\"\n    app = UniversalPipelineUI()\n    app.run()\n\nif __name__ == \"__main__\":\n    main()