{
  "permissions": {
    "allow": [
      "Bash(py:*)",
      "Bash(git push:*)",
      "Bash(\"C:\\Users\\Workstation_1\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\" -c \"\nimport sys\nsys.path.append(''scripts'')\nfrom database_connection import db_manager\n\ntry:\n    # Verify import results\n    result = db_manager.execute_query(\"\"\"\"\"\"\n        SELECT \n            COUNT(*) as total_vins,\n            COUNT(DISTINCT order_number) as unique_orders,\n            order_type,\n            order_date,\n            processed_date\n        FROM bmw_west_st_louis_vin_log \n        WHERE order_type = ''Historical''\n        GROUP BY order_type, order_date, processed_date;\n    \"\"\"\"\"\")\n    \n    if result:\n        for row in result:\n            print(f''[VERIFICATION] Import Summary:'')\n            print(f''  - Total VINs: {row[\"\"total_vins\"\"]}'')\n            print(f''  - Unique Orders: {row[\"\"unique_orders\"\"]}'')\n            print(f''  - Order Type: {row[\"\"order_type\"\"]}'')\n            print(f''  - Order Date: {row[\"\"order_date\"\"]}'')\n            print(f''  - Processed Date: {row[\"\"processed_date\"\"]}'')\n    \n    # Show sample data\n    sample = db_manager.execute_query(\"\"\"\"\"\"\n        SELECT order_number, vin \n        FROM bmw_west_st_louis_vin_log \n        WHERE order_type = ''Historical''\n        ORDER BY id\n        LIMIT 5;\n    \"\"\"\"\"\")\n    \n    if sample:\n        print(f''\\n[SAMPLE DATA] First 5 imported records:'')\n        for row in sample:\n            print(f''  Order: {row[\"\"order_number\"\"]} - VIN: {row[\"\"vin\"\"]}'')\n    \n    print(f''\\n[SUCCESS] BMW West St. Louis historical VIN import completed successfully!'')\n    \nexcept Exception as e:\n    print(f''[ERROR] Verification failed: {e}'')\n\")",
      "Bash(\"C:\\Users\\Workstation_1\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\" -c \"\nimport sys\nsys.path.append(''scripts'')\nfrom database_connection import db_manager\n\n# Test the corrected SQL query with actual Joe Machens Toyota VINs\nprint(''[SQL FIX TEST] Testing corrected query with Joe Machens Toyota VINs...'')\n\n# First, get some sample VINs for Joe Machens Toyota from active data\nsample_vins = db_manager.execute_query(''''''\n    SELECT nvd.vin FROM normalized_vehicle_data nvd\n    JOIN raw_vehicle_data rvd ON nvd.raw_data_id = rvd.id\n    JOIN scraper_imports si ON rvd.import_id = si.import_id\n    WHERE nvd.location = %s AND si.status = ''active''\n    LIMIT 5;\n'''''', (''Joe Machens Toyota'',))\n\nif sample_vins:\n    print(f''[SUCCESS] Found {len(sample_vins)} active VINs for Joe Machens Toyota'')\n    \n    # Test the exact query that''s used in the process_list_order method\n    for i, vin_row in enumerate(sample_vins, 1):\n        vin = vin_row[''vin'']\n        print(f''[TEST {i}] Testing VIN: {vin}'')\n        \n        vehicle_data = db_manager.execute_query(''''''\n            SELECT nvd.* FROM normalized_vehicle_data nvd\n            JOIN raw_vehicle_data rvd ON nvd.raw_data_id = rvd.id\n            JOIN scraper_imports si ON rvd.import_id = si.import_id\n            WHERE nvd.vin = %s AND nvd.location = %s AND si.status = ''active''\n            ORDER BY rvd.import_timestamp DESC\n            LIMIT 1\n        '''''', (vin, ''Joe Machens Toyota''))\n        \n        if vehicle_data:\n            print(f''  [SUCCESS] VIN {vin} found - Year: {vehicle_data[0][\"\"year\"\"]}, Make: {vehicle_data[0][\"\"make\"\"]}, Model: {vehicle_data[0][\"\"model\"\"]}'')\n        else:\n            print(f''  [ERROR] VIN {vin} not found'')\nelse:\n    print(''[ERROR] No active VINs found for Joe Machens Toyota'')\n\")",
      "Bash(\"C:\\Users\\Workstation_1\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\" app.py)",
      "Bash(\"C:\\Users\\Workstation_1\\AppData\\Local\\Programs\\Python\\Python311\\python.exe\" -c \"\nimport sys\nsys.path.append(''projects/minisforum_database_transfer/bulletproof_package/scripts'')\nfrom database_connection import db_manager\n\nprint(''[FIX] Updating Serra Honda O\\''Fallon configuration...'')\n\n# Update Serra Honda configuration to match South County DCJR\nresult = db_manager.execute_query(''''''\n    UPDATE dealership_configs \n    SET filtering_rules = %s\n    WHERE name = %s\n'''''', (\n    {\n        ''order_type'': ''cao'',  # Changed from maintenance to cao\n        ''require_stock'': True,\n        ''vehicle_types'': [''new'', ''used''],  # Added new vehicles\n        ''seasoning_days'': 7,\n        ''exclude_conditions'': [''po'', ''cpo''],  # Removed new from exclusions\n        ''allowed_vehicle_types'': [''new'', ''used''],  # Added new vehicles\n        ''exclude_missing_price'': False,\n        ''exclude_missing_stock'': True\n    },\n    ''Serra Honda O\\''Fallon''\n))\n\nprint(''[SUCCESS] Serra Honda configuration updated to include new and used vehicles'')\nprint(''Configuration now matches South County DCJR pattern for proper CAO processing'')\n\")"
    ],
    "deny": [],
    "ask": []
  }
}